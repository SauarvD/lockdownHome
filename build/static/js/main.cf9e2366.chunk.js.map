{"version":3,"sources":["Component/index.js","App.js","serviceWorker.js","index.js"],"names":["Index","props","useState","userName","setName","genderData","ethnicityData","genderProbData","ethnicityProbData","dataSet","setData","initialSpeeches","endingSpeeches","speech","Speech","useEffect","init","volume","lang","rate","pitch","then","data","welcomeVoice","console","log","catch","e","error","initSpeech","speakVoice","setAllData","finalResponse","gender","ethnicity","setVoice","speak","text","queue","firstName","split","initialItem","Math","floor","random","length","finalItem","className","onSubmit","event","axios","get","response","preventDefault","name","onChange","target","value","id","nrOfLevels","colors","arcWidth","percent","textColor","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4VAsLeA,EAhLD,SAAAC,GACZ,IADqB,EAOOC,mBAAS,IAPhB,mBAOdC,EAPc,KAOJC,EAPI,OAQMF,mBAPN,CACnBG,WAAY,GACZC,cAAe,GACfC,eAAgB,EAChBC,kBAAmB,IALA,mBAQdC,EARc,KAQLC,EARK,KASfC,EAAkB,CACtB,iBACA,iCACA,sBACA,yBACA,iBACA,cACA,oCACA,sBACA,wBACA,qBAEIC,EAAiB,CACrB,mBACA,6BACA,iBACA,wBACA,yBACA,mCACA,mBAEIC,EAAS,IAAIC,IAEnBC,qBAAU,WACRF,EAAOG,KAAK,CACVC,OAAQ,EACRC,KAAM,QACNC,KAAM,EACNC,MAAO,EACP,gBAAkB,IACjBC,MAAK,SAACC,GACLC,IACAC,QAAQC,IAAI,wCAAyCH,MACtDI,OAAM,SAAAC,GACLH,QAAQI,MAAM,yCAA0CD,QAE3D,IAEHZ,qBAAU,WACkB,KAAvBN,EAAQJ,YACTwB,MAED,CAACpB,IAEJ,IAAMoB,EAAa,WACjBhB,EAAOG,KAAK,CACVC,OAAQ,EACRC,KAAM,QACNC,KAAM,EACNC,MAAO,EACP,gBAAkB,IACjBC,MAAK,SAACC,GACLQ,IACAN,QAAQC,IAAI,wCAAyCH,MACtDI,OAAM,SAAAC,GACLH,QAAQI,MAAM,yCAA0CD,OAexDI,EAAa,SAACT,GAClB,IAAIU,EAAgB,CAClB3B,WAAYiB,EAAKW,OACjB3B,cAAegB,EAAKY,UACpB3B,eAAgBe,EAAK,sBACrBd,kBAAmBc,EAAK,0BAE1BZ,EAAQsB,IAOJT,EAAe,WACnBV,EAAOsB,SAAS,+CAChBtB,EAAOuB,MAAM,CACTC,KAAK,kKACLC,OAAO,IACRjB,MAAK,WACJG,QAAQC,IAAI,gBACbC,OAAM,SAAAC,GACLH,QAAQI,MAAM,sBAAuBD,OAIrCG,EAAa,WACjB,IAAIS,EAAYpC,EAASqC,MAAM,KAAK,GAGhCC,EAAc9B,EAAgB+B,KAAKC,MAAMD,KAAKE,SAAWjC,EAAgBkC,SACzEC,EAAYlC,EAAe8B,KAAKC,MAAMD,KAAKE,SAAWhC,EAAeiC,UACtEpC,EAAQD,mBAAqB,KAAQC,EAAQF,gBAAkB,OAChEkC,EAJmB,yBAKnBK,EANoB,2DAQO,UAA1BrC,EAAQH,gBACTG,EAAQH,cAAgB,WAE1BO,EAAOsB,SAAS,+CAChBtB,EAAOuB,MAAM,CACTC,KAAK,GAAD,OAAKI,EAAL,YAAoBF,EAApB,iCAAsD9B,EAAQH,cAA9D,YAA+EG,EAAQJ,WAAvF,4CAAqIyC,GACzIR,OAAO,IACRjB,MAAK,WACJG,QAAQC,IAAI,gBACbC,OAAM,SAAAC,GACLH,QAAQI,MAAM,sBAAuBD,OA+B3C,OACE,6BAASoB,UAAU,aACjB,yBAAKA,UAAU,WACb,0BAAMC,SA3FS,SAACC,GACpBC,IAAMC,IAAN,iDAAoDhD,IACjDkB,MAAK,SAAA+B,GACJrB,EAAWqB,EAAS9B,SAErBI,OAAM,SAAAE,GACLJ,QAAQC,IAAIG,MAEdqB,EAAMI,mBAoFF,4CAEE,2BACEC,KAAK,OACLC,SA3ES,SAACN,GACpB7C,EAAQ6C,EAAMO,OAAOC,WA4Ef,2CAEDhD,GArCH,yBAAKsC,UAAU,eACZ,yBAAKA,UAAU,cACd,yBAAKA,UAAU,aAAf,sBACA,kBAAC,IAAD,CAAYW,GAAG,eACbC,WAAY,GACZC,OAAQ,CAAC,UAAW,WACpBC,SAAU,GACVC,QAASrD,EAAQF,eACjBwD,UAAW,UAGf,yBAAKhB,UAAU,cACb,yBAAKA,UAAU,aAAf,yBACA,kBAAC,IAAD,CAAYW,GAAG,eACbC,WAAY,GACZC,OAAQ,CAAC,UAAW,WACpBC,SAAU,GACVC,QAASrD,EAAQD,kBACjBuD,UAAW,cCxIRC,MAVf,WACE,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWnE,OCDvBoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdxD,OAAM,SAAAE,GACLJ,QAAQI,MAAMA,EAAMuD,c","file":"static/js/main.cf9e2366.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport Speech from 'speak-tts' ;\nimport axios from 'axios';\nimport GaugeChart from 'react-gauge-chart';\n\nconst Index = props => {\n  const initialValue = {\n    genderData: \"\",\n    ethnicityData: \"\",\n    genderProbData: 0.00,\n    ethnicityProbData: 0.00\n  };\n  const [userName, setName] = useState(\"\");\n  const [dataSet, setData] = useState(initialValue);\n  const initialSpeeches = [\n    \"Let me guess, \",\n    \"This is gonna be interesting, \",\n    \"Oh it is too easy, \",\n    \"Bohot Hard, Bohot Hard\",\n    \"Let me think, \",\n    \"Kafi Sahi, \",\n    \"Ooh this is hard, but I would say\",\n    \"Give me a momemnt, \",\n    \"That's a clever one, \",\n    \"Mey sochti hoon, \"\n  ]\n  const endingSpeeches = [\n    \"Isn't it right ?\",\n    \"Now tell me if I am wrong.\",\n    \"Am I correct ?\",\n    \"kesa laga mera kamaal\",\n    \"How about that jaadu ?\",\n    \"Shall we guess some more names ?\",\n    \"Aur pucho pucho\"\n  ]\n  const speech = new Speech();\n\n  useEffect(() => {\n    speech.init({\n      volume: 1,\n      lang: \"hi-IN\",\n      rate: 1,\n      pitch: 1,\n      'splitSentences': true,\n    }).then((data) => {\n        welcomeVoice();\n        console.log(\"Speech is ready, voices are available\", data)\n    }).catch(e => {\n        console.error(\"An error occured while initializing : \", e)\n    })\n  }, []);\n\n  useEffect(() => {\n    if(dataSet.genderData !== \"\"){\n      initSpeech();\n    }\n  }, [dataSet])\n\n  const initSpeech = () => {\n    speech.init({\n      volume: 1,\n      lang: \"hi-IN\",\n      rate: 1,\n      pitch: 1,\n      'splitSentences': true,\n    }).then((data) => {\n        speakVoice();\n        console.log(\"Speech is ready, voices are available\", data)\n    }).catch(e => {\n        console.error(\"An error occured while initializing : \", e)\n    })\n  }\n\n  const handleSubmit = (event) => {\n    axios.get(`https://api.diversitydata.io/?fullname=${userName}`)\n      .then(response => {\n        setAllData(response.data);\n      })\n      .catch(error => {\n        console.log(error)\n      })\n      event.preventDefault();\n  }\n\n  const setAllData = (data) => {\n    let finalResponse = {\n      genderData: data.gender,\n      ethnicityData: data.ethnicity,\n      genderProbData: data[`gender probability`],\n      ethnicityProbData: data[`ethnicity probability`]\n    }\n    setData(finalResponse);\n  }\n\n  const handleChange = (event) => {\n    setName(event.target.value);\n  }\n\n  const welcomeVoice = () => {\n    speech.setVoice('Google हिन्दी');\n    speech.speak({\n        text: `Hey there. Please type your full name, and allow me, to guess your gender and ethnicity with my acquired dataset. Now I might be wrong, as I am still learning.`,\n        queue: false\n    }).then(() => {\n        console.log(\"Success !\")\n    }).catch(e => {\n        console.error(\"An error occurred :\", e)\n    })\n  }\n\n  const speakVoice = () => {\n    let firstName = userName.split(' ')[0];\n    var guessInitalItem = \"Now I have a feeling that, I might be wrong about this.\";\n    var guessFinalItem = \"Ooh, this is too hard,\"\n    var initialItem = initialSpeeches[Math.floor(Math.random() * initialSpeeches.length)];\n    var finalItem = endingSpeeches[Math.floor(Math.random() * endingSpeeches.length)];\n    if(dataSet.ethnicityProbData <= 0.56 || dataSet.genderProbData <= 0.56 ){\n      initialItem = guessFinalItem\n      finalItem = guessInitalItem\n    }\n    if(dataSet.ethnicityData === 'black'){\n      dataSet.ethnicityData = 'african'\n    }\n    speech.setVoice('Google हिन्दी');\n    speech.speak({\n        text: `${initialItem} ${firstName}. I think, you are an ${dataSet.ethnicityData} ${dataSet.genderData} with the following probability. ${finalItem}`,\n        queue: false\n    }).then(() => {\n        console.log(\"Success !\")\n    }).catch(e => {\n        console.error(\"An error occurred :\", e)\n    })\n  }\n\n  const renderCharts = () => {\n    return (\n      <div className=\"chartParent\">\n         <div className=\"chartStyle\">\n          <div className=\"chartName\">Gender probability</div>\n          <GaugeChart id=\"gauge-chart1\" \n            nrOfLevels={30} \n            colors={[\"#FF5F6D\", \"#FFC371\"]} \n            arcWidth={0.3} \n            percent={dataSet.genderProbData} \n            textColor={'#000'}\n          />\n        </div>\n        <div className=\"chartStyle\">\n          <div className=\"chartName\">Ethnicity probability</div>\n          <GaugeChart id=\"gauge-chart2\" \n            nrOfLevels={30} \n            colors={[\"#FF5F6D\", \"#FFC371\"]} \n            arcWidth={0.3} \n            percent={dataSet.ethnicityProbData}\n            textColor={'#000'}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <article className=\"container\">\n      <div className=\"content\">\n        <form onSubmit={handleSubmit}>\n          <label>\n            Full Name:\n            <input\n              name=\"name\"\n              onChange={handleChange}/>\n          </label>\n          <button>Submit</button>\n        </form>\n        {dataSet && \n          renderCharts()\n        }\n      </div>\n    </article>\n  );\n};\n\nexport default Index;\n","import React from 'react';\nimport './App.css';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch\n} from \"react-router-dom\";\nimport Index from \"./Component/index\";\n\nfunction App() {\n  return (\n    <Router>\n        <Switch>\n          <Route path=\"/\" exact component={Index} />\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}